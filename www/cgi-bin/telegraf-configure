#!/usr/bin/python3

# This web page is used to build a configuration for a Telegraf agent 
# based on a URL call with some params
# os=  The template to use.  "linux" or "windows" supported
# host=  The hostname. This should be short name in lower case
# reset=   Set to "true" to rebuild the configuration on startup
# tags=  A series of tags to deploy templated monitoring packs for known componenents

import cgi
import datetime
import os
import elasticsearch
import configparser

maas = configparser.RawConfigParser()
maas.read('/app/maas/conf/env')

print("Content-Type:text/plain\n")

es = { "url": maas['elastic']['url'] ,"user": maas['elastic']['user'],"pass": maas['elastic']['pass'] }

fragment_index = "maas_config_fragments"
host_config_index_in = "maas_config_hosts_require"
host_config_index_out = "maas_config_hosts_publish"
config_log = "maas_agent_configure_log_history"

message = ""
fs = cgi.FieldStorage()

if 'host' in fs:
  host = fs['host'].value
  target = host + ".telegraf"
  
  message = host
  platform = ""

  # If config already exists then load it
  content = ""
  try:
    doc = elasticsearch.get_document_by_id(es,host_config_index_out,"_doc",host)['_source']
    content = doc['content']
    platform = doc['platform']
    message += " Config already exists"
  except:
    pass

  if content == "" or 'reset' in fs :

    # If an OS param was supplied, then use that template
    if 'os' in fs:
      platform = fs['os'].value

    if platform != "":
      template = "telegraf." + platform + ".template"
    # No OS param so use very basic config
    else :
      template = "telegraf.template"

    # Get the base config for this host
    # "content" will be built up based on information in incoming request
    host_frag = elasticsearch.get_document_by_id(es,fragment_index,"_doc",template)['_source']['fragment']
    content = host_frag.replace("\\n","\n").replace("\\\"","\"").replace("%HOST%",host)
    content = content.replace("%INFLUXDB%",maas['influxdb']['url'])

    try : 
      host_config_in = elasticsearch.get_document_by_id(es,host_config_index_in,"_doc",host)['_source']['config']
      collect = host_config_in.replace("\\n","\n").replace("\\\"","\"").split()
    except:
      collect = ""

    try :
      for line in collect:
        monitor_type,instance = line.rstrip().split("=")
        x = ""
        # Process monitor. 
        if monitor_type == "process" :
          fragment = "procstat." + platform + ".template"
          x = elasticsearch.get_document_by_id(es,fragment_index,"_doc",fragment)['_source']['fragment']
          x = x.replace("\\n","\n").replace("\\\"","\"").replace("%PROCESS%",instance)
        # Filesystem monitor
        elif monitor_type == "filesystem":
          fragment = "disk." + platform + ".template"
          x = elasticsearch.get_document_by_id(es,fragment_index,"_doc",fragment)['_source']['fragment']
          x = x.replace("\\n","\n").replace("\\\"","\"").replace("%FILESYSTEM%",instance)
        # URL monitor
        elif monitor_type == "http":
          fragment = "http.template"
          x = elasticsearch.get_document_by_id(es,fragment_index,"_doc",fragment)['_source']['fragment']
          x = x.replace("\\n","\n").replace("\\\"","\"").replace("%URL%",instance)
        # Pre-populated template
        elif monitor_type == "template":
          fragment = "template." + instance + "." + platform + ".template"
          x = elasticsearch.get_document_by_id(es,fragment_index,"_doc",fragment)['_source']['fragment']
          x = x.replace("\\n","\n").replace("\\\"","\"")

        # Add the processed fragment
        content += x

      collect.close()
    except:
      pass
    
    message += " New config generated"
  print(content)
  now = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
  doc = {"host":host,"content":content,"last_updated":now,"platform":platform}
  x = elasticsearch.post_document(es,host_config_index_out,"_doc",host,doc)

else:
  message += " No hostname supplied"


now = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
doc = {"host":host,"message":message,"timestamp":now}
elasticsearch.post_document(es,config_log,"_doc","",doc)

