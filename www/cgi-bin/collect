#!/usr/bin/python3

import cgi
from urllib.request import Request,urlopen
import urllib.parse
import configparser
import json

maasconf = configparser.RawConfigParser()
maasconf.read('/app/maas/conf/env')

print("Content-Type:text/html;\n")
print("<html><head><link rel='stylesheet' type='text/css' href='/dark.css'></head>")
print("<h1><A style='text-decoration:none' HREF='/cgi-bin/index'>Host Monitoring Configuration Management</a></h1>")
print("<hr>")

api_url = maasconf['api']['url']

fs = cgi.FieldStorage()
try:
  mode = fs['mode'].value
except:
  mode = "view"

########### EDIT
if mode == "edit":
  # If we have a entityname and config, then write the config out
  if 'config' in fs and 'entity' in fs :
    entity = fs['entity'].value
    config = fs['config'].value

    # Get the platform for this host
    req = Request(api_url + "/entity?entity=" + entity,method='GET')
    platform = json.loads(json.load(urlopen(req)))[0]['platform']

    # Now post the new config
    params = {"entity":entity,"platform":platform,"config":config}
    data = str(json.dumps(params)).encode("utf-8")
    req = Request(api_url + "/config/entity",data=data)
    req.add_header('Content-Type','application/json')
    resp = str(urlopen(req).read(),'utf-8')
   
    if resp == "created" or resp == "updated" : 
      # Rebuild the configuration so that it is pulled at next startup
      urllib.request.urlopen(maasconf['maas']['url'] + "/cgi-bin/telegraf-configure?host=" + entity + "&reset=true")
      print("<h2>Config written, view <A HREF='/cgi-bin/collect?mode=view&entity=" + entity + "'>here</A></h2>")
      print("<h5>Agent needes to be retarted to pick up new config</h5>")
      print("<h3>Click <A HREF='/cgi-bin/telegraf-configure?host=" + entity + "'>here</A> to see Telgraf config</h3>")
    else :
      print("<h5>ERROR writing new config</h5><BR>")
      print(resp)
  # Only a entity passed, so try and read existing config and then show form
  elif 'entity' in fs :
    entity = fs['entity'].value
    try :
      req = Request(api_url + "/config/entity?mode=custom&entity=" + entity,method='GET')
      config = json.loads(json.load(urlopen(req)),strict=False)[0]['config']

    except :
      config = ""

    print("""
<html>
Configure metric collection for a entity
<FORM ACTION="/cgi-bin/collect?mode=edit" METHOD="POST">
<TABLE>
 <TR>
  <TD>Hostname</TD>
  <TD>
    <input name="entity" id="entity" value=""" + entity + """></input>
  </TD>
  <TD>&nbsp;&nbsp;&nbsp;</TD>
  <TD> </TD>
 </TR>
 <TR>
  <TD>Content</TD>
  <TD>
    <textarea rows=10 cols=40 id="config" name="config">""" + config + """</textarea>
  </TD>
  <TD></TD>
  <TD align=center>
<B>Supported Monitors</B><BR>
process=<I>process_name</I><BR>
filesystem=<I>mount_point</I><BR>
http=<I>url</I><BR>
template=<I>pre-configured-component-template</I><BR>
  </TD>
 </TR>
 <TR>
  <TD COLSPAN=2 ALIGN=CENTER>
   <input type="submit"></input>
  </TD>
 </TR>
  

</TABLE>

</FORM>
<BR><BR>

""")
      # No fields passed so show inventory of existing entitys
  else :
    print("<h2>Monitored Host Inventory</h2>")
    print("<TABLE class='blueTable'><TR><TH>Host<TH>Action</TR>")
    try : 
      req = Request(api_url + "/entity",method='GET')
      all_entities = json.loads(json.load(urlopen(req)))
      records = sorted(all_entities,key=lambda i: i['entity'] )
    except :
      records = {}
    for r in records:
      entity = r['entity'] 
      print("<TR><TD>" + entity + "<TD><A HREF='/cgi-bin/collect?entity=" + entity + "&mode=edit'>Edit Config</A></TR>")
    print("</TABLE>")

   
#################### VIEW
elif mode == "view":
  if "entity" in fs: 
    entity = fs['entity'].value
    try:
      req = Request(api_url + "/config/entity?mode=custom&entity=" + entity,method='GET')
      conf = json.loads(json.load(urlopen(req)),strict=False)[0]['config'].split()

      print("<h2>Showing custom collection for entity " + entity + "</h2>")
      print("<TABLE class='blueTable'><TR><TH>Monitor Type</TH><TH>Instance</TH></TR>")
      for line in conf:
        x = line.split("=")
        print("<TR><TD>" + x[0] + "</TD><TD>" + x[1] + "</TD></TR>")
      print("</TABLE>")
      print("<h3><A HREF='/cgi-bin/collect?mode=edit&entity=" + entity + "'>Edit Custom Config</A></h3>")
      print("<h3><A HREF='/cgi-bin/telegraf-configure?host=" + entity + "'>View Full Config</A></h3>")
    except:
      print("<h3>No Custom Configuration found for entity %s</h3>" %  (entity))
      print("<h4><A HREF='/cgi-bin/collect?mode=edit&entity=" + entity + "'>Add New Configuration here </A></h4>")

  else :
    # Here we're going to get all entitys which have a config and display
    # in a table.  If there is a custom config, then we'll show that too
    try :
      # Get list of all hosts from API call
      req = Request(api_url + "/entity",method='GET')
      all_entities = json.loads(json.load(urlopen(req)))
      all_entities = sorted(all_entities,key=lambda i: i['entity'] )
    except:
      all_entities = {}

    try:
      # Get list of all hosts with custom monitors 
      req = Request(api_url + "/config/entity?mode=custom",method='GET')
      custom_entities = json.loads(json.load(urlopen(req)),strict=False)
      # Now build a dictionary of custom hosts so we can reference later
      custom = {}
      for r in custom_entities:
        entity = r['entity']
        custom[entity] = True
    except:
      custom = {}

    print("""
    <TABLE class='blueTable'>
    <TR><TH COLSPAN=3 ALIGN=CENTER>Configured Hosts</TH></TR>
    <TR><TH>Platform<TH>Full Config<TH>Custom Config</TR>
""") 
    for r in all_entities:
      entity = r['entity']
      platform = r['platform']
      full_url = "<A HREF='/cgi-bin/telegraf-configure?host=" + entity + "'>" + entity + "</A>"
      custom_url = "<A HREF='/cgi-bin/collect?mode=edit&entity=" + entity + "'><FONT COLOR=RED>Create New</FONT></A>"
      if entity in custom:
          custom_url = "<A HREF='/cgi-bin/collect?mode=view&entity=" + entity + "'><FONT COLOR=GREEN>View Existing</FONT></A>"
      print("<TR><TD>" + platform + "<TD ALIGN=CENTER>" + full_url + "</TD><TD>" + custom_url + "</TD></TR>")
    print("</TABLE>")
    print("<h5>Append &entity=xxx to the URL to jump directly to a entity config</h5>")
    print("<h3><A HREF='/cgi-bin/collect?mode=edit'>Add Configuration for New Host</A></h3>")
      
