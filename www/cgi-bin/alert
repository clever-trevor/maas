#!/usr/bin/python3

# This routing controls viewing and setting of alerting
import cgi
import os
import configparser
from urllib.request import Request,urlopen
import json


maas = configparser.RawConfigParser()
maas.read('/app/maas/conf/env')

api_url = maas['api']['url']

print("Content-Type:text/html;\n")
print("<html><head><link rel='stylesheet' type='text/css' href='/dark.css'></head>")
print("<h1><A style='text-decoration:none' HREF='/cgi-bin/index'>Monitoring Alert Management</a></h1>")
print("<hr>")

# Pull in URL parameters
fs = cgi.FieldStorage()
try:
  mode = fs['mode'].value
except:
  mode = "view"

# Routine to print a Select block with a preselected option if a match found
def print_select(id,name,options,match) :
  print(str(type(options)))
  print("<select id='%s' name='%s'>" % (id,name))
  for option in options.split(",") :
    print("<option value='%s'" % ( option ))
    if option == match :
      print(" selected ")
    print(">%s</option>" % (option))

########### EDIT
if mode == "edit":
  # We have passed in the contents and entity so we will just set them 
  # Note : "edit=true" means don't write the detail but pre-populate form (next section)
  if 'entity' in fs and not 'edit' in fs :
    entity = fs['entity'].value
    metric_class = fs['metric_class'].value
    metric_object = fs['metric_object'].value
    metric_instance = fs['metric_instance'].value
    metric_name = fs['metric_name'].value
    alert_operator = fs['alert_operator'].value
    alert_threshold = fs['alert_threshold'].value
    support_team = fs['support_team'].value
    try:
      alert_tag = fs['alert_tag'].value
    except:
      alert_tag = ""

    doc = { "entity":entity, "metric_class":metric_class, "metric_object":metric_object, "metric_instance":metric_instance, "metric_name":metric_name, "alert_operator":alert_operator, "alert_threshold":alert_threshold, "support_team":support_team, "alert_tag":alert_tag }
    data = str(json.dumps(doc)).encode("utf-8")

    req = Request(api_url + "/config/alert",data=data)
    req.add_header('Content-Type','application/json')
    resp = str(urlopen(req).read(),'utf-8')
    if resp == 'created' or resp == 'updated' :
      print("<h3><font color='Green'>Alert was %s in Database</font></h3>" % (resp))
      print("<h4><A HREF='/cgi-bin/alert?mode=view'>View all Alert Configuration</A></h4>")
    else :
      print("<h3><font color='Red'>** Alert Could not be written to Database (Result = %s) **</font></h3>" % (resp) )

     
  # Either some detail was missing, or we want to go into form "edit" mode
  else :
    # See if we can get some details from the URL params
    if 'entity' in fs : 
      entity = fs['entity'].value
    else :
      entity = ""
    if 'metric_class' in fs : 
      metric_class = fs['metric_class'].value
    else :
      metric_class = ""
    if 'metric_object' in fs : 
      metric_object = fs['metric_object'].value
    else :
      metric_object = ""
    if 'metric_instance' in fs : 
      metric_instance = fs['metric_instance'].value
    else :
      metric_instance = ""
    if 'metric_name' in fs : 
      metric_name = fs['metric_name'].value
    else :
      metric_name = ""
    if 'alert_operator' in fs : 
      alert_operator = fs['alert_operator'].value
    else :
      alert_operator = ""
    if 'alert_threshold' in fs : 
      alert_threshold = fs['alert_threshold'].value
    else :
      alert_threshold = ""
    if 'support_team' in fs : 
      support_team = fs['support_team'].value
    else :
      support_team = ""
    if 'alert_tag' in fs : 
      alert_tag = fs['alert_tag'].value
    else :
      alert_tag = ""

    # Now lets build the form, populating values if we have them
    print("""
<html>
<h2>Configure metric collection for an entity </h2>
<h4>Set the condition so that it will evaluate to true when an alert should be generated</h4>
<FORM ACTION="/cgi-bin/alert?mode=edit" METHOD="POST">
<TABLE>
 <TR>
  <TD>Hostname</TD>
  <TD>
    """)
    # Build list of entities based on entitys that are currently configured
    req = Request(api_url + "/entity",method='GET')
    entities = json.loads(json.load(urlopen(req)))
    entities = sorted(entities,key=lambda i: i['entity']) # Sort it
    entity_list = ""
    for e in entities:
      entity_list += e['entity'] + ","
    print_select("entity","entity",entity_list[:-1],entity)

    print("""

  </TD>
 </TR>
 <TR>
  <TD>Metric Class</TD>
  <TD>
  """)
    print_select("metric_class","metric_class","cpu,disk,procstat,procstat_lookup,http",metric_class)
    print("""
  </TD>
 </TR>
 <TR>
  <TD>Metric Object</TD>
  <TD>
  """)
    print("<input name='metric_object' id='metric_object' value='" + metric_object + "'>")
    print("""
    </input>
  </TD>
 </TR>
 <TR>
  <TD>Metric Instance</TD>
  <TD>
  """)
    print("<input name='metric_instance' id='metric_instance' value='" + metric_instance + "'>")
    print("""
    </input>
  </TD>
 </TR>
 <TR>
  <TD>Metric Name</TD>
  <TD>
  """)
    print("<input name='metric_name' id='metric_name' value='" + metric_name + "'>")
    print("""
    </input>
  </TD>
 </TR>
 <TR>
  <TD>Alert Operator</TD>
  <TD>
  """)
    print_select("alert_operator","alert_operator","<,<=,>,<=,=",alert_operator)
    print("""
  </TD>
 </TR>
 <TR>
  <TD>Alert Threshold</TD>
  <TD>
  """)
    print("<input name='alert_threshold' id='alert_threshold' value='" + alert_threshold+ "'>")
    print("""
    </input>
  </TD>
 </TR>
 <TR>
  <TD>Support Queue</TD>
  <TD>
  """)
    print("<input name='support_team' id='support_team' value='" + support_team + "'>")
    print("""
    </input>
  </TD>
 </TR>
 <TR>
  <TD>Tag (Optional)</TD>
  <TD>
  """)
    print("<input name='alert_tag' id='alert_tag' value='" + alert_tag + "'>")
    print("""
    </input>
  </TD>
 </TR>
 <TR>
  <TD COLSPAN=2 ALIGN=CENTER>
   <input class="form-submit-button" type="submit"></input>
  </TD>
 </TR>
  
</TABLE>
</FORM>

<B>Example Metrics</B><BR>
<TABLE border=1><TR><TH>Metric Class<TH>Metric Object<TH>Metric Instance<TH>Metric Name</TR>
<TR><TD>cpu<TD>cpu<TD>cpu-total<TD>usage_idle<BR>usage_system<BR>usage_user</TR>
<TR><TD>disk<TD>path<TD>/opt<BR>C:<TD>free<BR>inodes_free<BR>used<BR>used_percent</TR>
<TR><TD>procstat<TD>exe<TD>sshd<BR>syslogd<TD>cpu_time_idle<BR>cpu_time_user<BR>cpu_time_system<BR>memory_usage<BR>num_threads</TR>
<TR><TD>procstat_lookup<TD>exe<TD>sshd<BR>syslogd<TD>pid_count<BR>runnning</TR>
<TR><TD>http<TD>server<TD>http://1.2.3.4/index.html<TD>response_time<BR>result_code</TR>
</TABLE>
""")

################### VIEW Alert config
elif mode == "view":
  print("<h2>Alert Config View</h2>")
  # Alert configuration
  try:
    req = Request(api_url + "/config/alert",method='GET')
    alerts = json.loads(json.load(urlopen(req)))

    print("<TABLE class='blueTable'><TR><TH>Host<TH>Metric Class<TH>Metric Object<TH>Metric Instance<TH>Metric Name<TH>Alert Operator<TH>Alert Threshold<TH>Support Team<TH>Alert Tag</TR>")

    for r in alerts:
      entity = r['entity']
      metric_class = r['metric_class']
      metric_object = r['metric_object']
      metric_instance = r['metric_instance']
      metric_name = r['metric_name']
      alert_operator = r['alert_operator']
      alert_threshold = r['alert_threshold']
      support_team = r['support_team']
      try :
        alert_tag = r['alert_tag']
      except:
        alert_tag = ""

      params = "&entity=%s&metric_class=%s&metric_object=%s&metric_instance=%s&metric_name=%s&alert_operator=%s&alert_threshold=%s&support_team=%s&alert_tag=%s&edit=true" % ( entity,metric_class,metric_object,metric_instance,metric_name,alert_operator,alert_threshold,support_team,alert_tag)
      url = "/cgi-bin/alert?" 
      print("<TR><TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD><A HREF='%s'>Edit</A><TD><A HREF='%s'>Delete</A></TR>" % ( entity,metric_class,metric_object,metric_instance,metric_name,alert_operator,alert_threshold,support_team,alert_tag,url + "mode=edit" + params, url + "mode=delete" + params))
    print("</TABLE>")
  except:
    print("<h3>Unable to get alert config</h3>")
  print("<h3><A HREF='/cgi-bin/alert?mode=edit'>Add New Alert</A></h3>")

elif mode == "delete" :
  entity = fs['entity'].value
  metric_class = fs['metric_class'].value
  metric_object = fs['metric_object'].value
  metric_instance = fs['metric_instance'].value
  metric_name = fs['metric_name'].value

  doc = {"entity":entity,"metric_class":metric_class,"metric_object":metric_object,"metric_instance":metric_instance,"metric_name":metric_name} 
  data = str(json.dumps(doc)).encode('utf-8')

  req = Request(api_url + "/config/alert",method='DELETE',data=data)
  req.add_header('Content-Type','application/json')
  resp = str(urlopen(req).read(),'utf-8')

  if resp == "deleted":
    print("<h4><font color='Green'>Alert config Deleted from Database</font></h4>")
  else:
    print("<h4><font color='Red'>** Alert was not deleted from Database (Response = %s)**</font></h4>" % (resp))

  print("<h3><A HREF='/cgi-bin/alert?mode=view'>View Alert Configuration</A></H3>")

print("</html>")

