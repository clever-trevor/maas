#!/usr/bin/python3

# This routing controls viewing and running Groups of tests
import cgi
import elasticsearch
import influx
import datetime
import configparser

# Read in the config for this host
maas = configparser.RawConfigParser()
maas.read('/app/maas/conf/env')

# Set some variables from this
influx_url = maas['influxdb']['url'] + "/query"

es = { "url": maas['elastic']['url'] ,"user": maas['elastic']['user'],"pass": maas['elastic']['pass'] }
alert_config_index = "maas_config_alert"

# REad in parameters passed to page
fs = cgi.FieldStorage()

# Set the default mode if not provided
mode = "view"
if 'mode' in fs :
  mode = fs['mode'].value

print("Content-Type:text/html;\n")
print("<html><head><link rel='stylesheet' type='text/css' href='/dark.css'></head>")
print("<h1><A style='text-decoration:none' HREF='/cgi-bin/index'>Group Alert Management</a></h1>")
print("<hr>")

tag_in = ""
if 'tag' in fs :
  tag_in = fs['tag'].value
else:
  print("<H3>You need to pass in a parameter called <b>tag</b></H3>")
  print("<H4>Available tags below</H4>")
  query = {"size":0,"aggs":{"uniq_tags":{"terms":{"field":"tag.keyword"}}}}
  x = elasticsearch.run_search(es,alert_config_index,query)['aggregations']['uniq_tags']['buckets']
  print("<TABLE class='blueTable'><TR><TH>Tag</TR>")
  for tag in x :
    print("<TR><TD>")
    mytags = tag['key'].split()
    for mytag in mytags:
      print("<A HREF='/cgi-bin/alert-groups?tag=%s'>%s</A>" % ( mytag,mytag))
    print("</TD></TR>")
  print("</TABLE>")
  exit()

# Build Elastic query to return all records which match the supplied tag
query = "q=tag.keyword:*" + tag_in + "*"
x = elasticsearch.run_search_uri(es,alert_config_index, query + "&size=10000")['hits']
# If no results returned, then drop out
if x['total'] == 0:
  print("<h2>No tests found for Tag <i>%s</i></h2>" % ( tag_in ))
  exit()

# Bring the records into a list
records = x['hits']

# Test mode means to execute the tests
if mode == "test" :

  print("<H2>Running tests in group <i>%s</i><h2>" % (tag_in))

  # Build a table of each test executed to show at the end
  monitors = "<TABLE class='blueTable'><TR><TH>Tag(s)<TH>Host<TH>Monitor Type<TH>Instance Name<TH>Instance Value<TH>Metric<TH>Operator<TH>Threshold<TH>Actual<TH>Status<TH>Sample Time</TR>"

  status = {}  # Dictionary used to store the overall monitors and status
  for r in records :
    r = r['_source']
    host = r['host']
    metric_type = r['type']
    instance_name = r['instance_name']
    instance_value = r['instance_value']
    metric = r['metric']
    operator = r['operator']
    threshold = r['threshold']
    queue = r['queue']
    tag = r['tag']

    # Run an Influx query for each metric
    query = "SELECT last(%s) FROM telegraf.autogen.%s WHERE host = '%s' " % ( metric, metric_type, host )
    if instance_name != "" :
      query += " AND %s='%s'" % ( instance_name, instance_value )
    value, time_stamp = influx.get_metric(influx_url,query)

    # Test the result
    result = influx.test_metric(value,operator,threshold)
    # Reformat the time stamp field
    time_stamp = time_stamp.replace("T"," ").replace("Z"," ")

    # If first record, then create an initial dictionary entry with some defaults
    if tag_in not in status :
      status[tag_in] = {}
      status[tag_in]['outcome'] = "PASS"
      status[tag_in]['tests'] = 0
      status[tag_in]['failed'] = 0
      status[tag_in]['passed'] = 0

    # Add to number of tests found
    status[tag_in]['tests'] += 1

    # Result of "true" means the condition was true.  i.e. failed
    if result is True or value == -1 :
      status[tag_in]['outcome'] = "FAIL"
      status[tag_in]['failed'] += 1
      result = "<FONT Color=Red>FAIL</font>"
    else :
      status[tag_in]['passed'] += 1
      result = "<FONT Color=Green>PASS</font>"

    # Add record to the monitors table
    monitors += "<TR><TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s</TR>" % (tag,host,metric_type,instance_name,instance_value,metric,operator,threshold,str(value),str(result),time_stamp)

  monitors += "</TABLE>"

  # Print one line summary of all tests executed
  print("<TABLE class='blueTable'><TR><TH>Tag<TH>Total Tests<TH>Failed<TH>Passed<TH>Outcome</TR>")
  for tag in status:
    outcome = status[tag]['outcome']
    if outcome == "FAIL" :
      outcome = "<FONT Color=Red>FAIL</font>"
    else :
      outcome = "<FONT Color=Green>PASS</font>"
    tests = status[tag]['tests']
    failed = status[tag]['failed']
    passed = status[tag]['passed']
    print("<TR><TD>%s<TD>%s<TD>%s<TD>%s<TD>%s</TR>" % (tag,tests,failed,passed,outcome))
  
  print("</TABLE>")
  # Now print the detailed table 
  print("<h2>Breakdown</h2>" + monitors)


# View Mode
else :
  print("<h2>Viewing matches for tag <i>%s</i></h2>" % ( tag_in ))
  print("<TABLE class='blueTable'><TR><TH>Tag(s)<TH>Host<TH>Monitor Type<TH>Instance Name<TH>Instance Value<TH>Metric<TH>Operator<TH>Threshold</TR>")

  # Loop through each record that was found
  for r in records :
    r = r['_source']
    host = r['host']
    metric_type = r['type']
    instance_name = r['instance_name']
    instance_value = r['instance_value']
    metric = r['metric']
    operator = r['operator']
    threshold = r['threshold']
    queue = r['queue']
    tag= r['tag']
    # And print it
    print("<TR><TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s<TD>%s</TR>" % (tag,host,metric_type,instance_name,instance_value,metric,operator,threshold))

print("</html>")
